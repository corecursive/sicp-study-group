#+TITLE: Chapter 1

* 1.1.8 Procedures as Black-Box Abstractions

Mention of recursive functions! Finally! The procedure is determined in terms of
itself.

To build a program we want to *decompose* a problem in subproblems, but this
decomposition has to be meaningful.  We want to create *Procedural Abstractions*.

Create sub-procedures so their implementation —the details– is
indistinguishable, only the behavior is what we want to care about.

Parameters –at least in scheme— have a local name, to avoid conflicts with
external variables.  Procedures are said to have *formal parameters*, the
definition of the procedure *binds* its parameters, no matter what their name
is.  If a variable is not *bound* it is *free* (in other words, a free variable
is neither a parameter nor a local variable in the procedure).

** Internal definitions

Sub-procedures can be defined inside another procedure, to avoid name conflicts.
=sqrt= can be rewritten like this:

#+begin_src scheme
(define (square x) (* x x))

(define (average x y)
  (/ (+ x y) 2))

(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))

(sqrt 4)
#+end_src

#+RESULTS:
: 2.0000000929222947

This makes =sqrt= a blackbox, users do not have to know or care about =improve=
or =good-enough?= to use it effectively.
* 1.2 Procedures and the Processes They Generate
** 1.2.1 Linear Recursion and Iteration
Typical approach for defining factorial:

#+begin_src scheme
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))

(factorial 3)
#+end_src

#+RESULTS:
: 6

Other approach: we use a counter and accumulate a product.

#+begin_src scheme
(define (factorial n)
  (define (fact-iter product counter max-count)
    (if (> counter max-count)
        product
        (fact-iter (* counter product)
                   (+ counter 1)
                   max-count)))
  (fact-iter 1 1 n))

(factorial 6)
#+end_src

#+RESULTS:
: 720

The first definition requires the interpreter to keep the track of the operation
for each level in the computation, it is a *linear recursive process* growing
linearly on n, whereas the second one does not grow but has =n= steps, it is a
*linear iterative process*.

Note: We are talking here about processes *not* procedures.
**** Exercise 1.9
First one:
#+begin_src scheme
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
#+end_src

Second one:
#+begin_src scheme
(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 7)
(+ (dec 2) (inc 7))
(+ 1 8)
(+ (dec 1) (inc 8))
(+ 0 9)
9
#+end_src

**** Exercise 1.10
Ackermann's function:

#+name: ackermann
#+begin_src scheme
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
#+end_src

#+begin_src scheme :noweb yes
<<ackermann>>
(list (A 1 10)
      (A 2 4)
      (A 3 3))
#+end_src

#+RESULTS:
: (1024 65536 65536)

Simplify:
#+begin_src scheme
(define (f n) (A 0 n))
;; since x is 0 we can substitute?
(define (f n) (* 2 n))

(define (g n) (A 1 n))
(A (- 1 1)
   (A 1 (- n 1)))
(A 0 (A 1 (- n 1)))
(* 2 (A 1 (- n 1)))
(* 2 (A 0
        (A 1 (- n 1))))

;; g is (2n)ⁿ ?

#+end_src

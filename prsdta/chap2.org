#+TITLE: Chapter 2 - Building Abstractions with Data

* 2.1 Introduction to Data Abstraction
** 2.1.1 Example: Arithmetic Operations for Rational Numbers
Introducting procedures to work with rational numbers:

#+name: rat-operations
#+begin_src scheme

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
#+end_src

Then introduces the pair data type:
#+begin_src scheme
(define x (cons 1 2))

(car x) ; 1
(cdr x) ; 2
#+end_src

Allows us to create a structure for our rational numbers:
#+name: make-rat
#+begin_src scheme
(define (make-rat n d) (cons n d))
(define (numer x) (car x))
(define (denom x) (cdr x))
#+end_src

#+name: print-rat
#+begin_src scheme
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
#+end_src

#+begin_src scheme :results output :noweb yes
<<make-rat>>
<<print-rat>>
(define one-half (make-rat 1 2))
(print-rat one-half)
#+end_src

#+RESULTS:
:
: 1/2

*** Exercise 2.1

#+name: better-make-rat
#+begin_src scheme
(define (make-rat n d)
  (let ((g (gcd n d))
        (sign (lambda (n) (if (< n 0) -1 1))))
    (let ((new-num (/ n g))
          (new-den (/ d g)))
      (cons (if (= (sign new-den) (sign new-num))
                (abs new-num)
                (- (abs new-num)))
            (abs new-den)))))
#+end_src

** 2.1.2 Abstraction Barriers

** 2.1.3 What Is Meant by Data?
function has a domain and range:
domain is the input, range is the output

* 2.2 Hierarchical Data and the Closure Property
The "Closure" term comes from algebra. An operation with the closure property
produces a values that can be combined again with the same operation.  e.g.: the
integers are closed over the addition.

This is the meaning of the word in this book, not the one commonly used in
programming (apparently pioneered by Lisp). I think they usually use the term
environment instead?

** 2.2.1 Representing Sequences
Use the form ~(list)~ to produce a list of items, rather than chain calls to
~(cons)~.

Get the value at an index in the list.
#+name: list-ref
#+begin_src scheme
(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items)
                (- n 1))))
#+end_src

The ~append~ procedure illustrates a common programming technique in lisp: «cons
up» the result while ~cdr~ ing down a list.

#+name: append
#+begin_src scheme
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1)
            (append (cdr list1)
                    list2))))
#+end_src

*** Exercise 2.17
Define a procedure last-pair that returns the list that contains only the last
element of a given (nonempty) list:
#+srcname: last-pair
#+begin_src scheme
(define (last-pair l)
  (if (null? (cdr l))
      (car l)
      (last-pair (cdr l))))

(= (last-pair (list 23 72 149 34)) 34)
#+end_src

*** Exercise 2.18
Define a procedure reverse that takes a list as argument and returns a list of
the same elements in reverse order:

#+begin_src scheme
(define (reverse lst)
  (define (iter lst acc)
    (if (null? lst)
        acc
        (iter (cdr lst) (cons (car lst) acc))))
  (iter lst (list)))
#+end_src

*** Exercise 2.19
Define the procedures ~first-denomination~, ~except-first-denomination~ and
~no-more?~ in terms of primitive operations on list structures.  Does the order
of the list coin-values affect the answer produced by cc?  Why or why not?

#+begin_src scheme
(define us-coins
  (list 50 25 10 5 1))
(define uk-coins
  (list 100 50 20 10 5 2 1 0.5))

(define no-more? null?)
(define except-first-denomination cdr)
(define first-denomination car)

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0)
             (no-more? coin-values)) 0)
        (else
         (+ (cc amount (except-first-denomination coin-values))
            (cc
             (- amount (first-denomination coin-values))
             coin-values)))))
#+end_src

Order does not affect anything, because it's recursive anyway?

*** Exercise 2.20
Use the *dotted-tail notation* to define procedures with a variadic number or
arguments.

Use this notation to write a procedure same-parity that takes one or more
integers and returns a list of all the arguments that have the same even-odd
parity as the first argument.

#+begin_src scheme
(define (same-parity head . rest)
  (let ((is-odd (odd? head)))
    (define (iter lst res)
      (if (null? lst)
          res
          (iter (cdr lst)
                (if (eq? is-odd (odd? (car lst)))
                    ;; ugly, we have to append here, there should be a cleaner
                    ;; way with cons-ing?
                    (append res (list (car lst)))
                    res))))
    (iter rest (list head))))

(and (eq? (same-parity 1 2 3 4 5 6 7) (list 1 3 5 7))
     (eq? (same-parity 2 3 4 5 6 7) (list 2 4 6)))
#+end_src

*** Exercise 2.21
Here are two different definitions of square-list. Complete both of them by filling in the missing expressions:

#+begin_src scheme
(define (square x) (* x x))

(define (square-list items)
  (if (null? items)
      '()
      (cons (square (car items)) (square-list (cdr items)))))

(eq? (square-list (list 1 2 3 4)) '(1 4 9 16))
#+end_src

#+begin_src scheme
(define (square x) (* x x))

(define (square-list items)
  (map square items))

(eq? (square-list (list 1 2 3 4)) '(1 4 9 16))
#+end_src

use std::{
    future::{Ready, self}, net::{IpAddr, Ipv6Addr, SocketAddr}
};

use automerge::{sync::{Message, SyncDoc, State}, AutoCommit};
use autosurgeon::reconcile;

use crdt_minesweeper::{MineField, Rpc, Grid, FIELD_SIZE};
use futures::StreamExt;
use tarpc::{
    context, tokio_serde::formats::Bincode, server::{self, incoming::Incoming, Channel},
};

#[derive(Debug)]
struct Error;

impl std::error::Error for Error {}

impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "")
    }
}

// This is the type that implements the generated World trait. It is the business logic
// and is used to start the server.
#[derive(Clone)]
pub struct GameServer {
    peer: &mut AutoCommit,
    peer_state: &mut State,
}

impl Rpc for GameServer {
    // Each defined rpc generates two items in the trait, a fn that serves the RPC, and
    // an associated type representing the future output by the fn.
    type SyncFut = Ready<Vec<u8>>;
    fn sync(self, _: context::Context, name: Vec<u8>) -> Self::SyncFut {
        let GameServer { peer, peer_state } = self;
        loop {
            let two_to_one = Message::decode(&name);
            if let Ok(message) = &two_to_one {
                println!("two to one");
                self.peer
                    .sync()
                    .receive_sync_message(&mut peer_state, message.to_owned())
                    .unwrap();
            }
            let one_to_two = self.peer.sync().generate_sync_message(&mut peer_state);
            if let Some(message) = &one_to_two {
                println!("one to two");
                // stream.write(&message.to_owned().encode());
            }
            if (&two_to_one).is_err() && one_to_two.is_none() {
                break;
            }
        }
        // in the server, reconcile, generate, and send a new message
        future::ready(name)
    }

    type ConnectFut = Ready<u8>;
    fn connect(self, _: context::Context, _client: ()) -> Self::ConnectFut {
        println!("Connected from server");
        future::ready(42)
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut peer1 = automerge::AutoCommit::new();
    let mut peer1_state = automerge::sync::State::new();
    // Peer 1 puts data into the document
    reconcile(
        &mut peer1,
        &MineField {
            grid: Grid::new(FIELD_SIZE),
        },
    )
    .unwrap();
    let message1to2 = peer1
        .sync()
        .generate_sync_message(&mut peer1_state)
        .ok_or(Error {})
        .unwrap()
        .encode();

    let server_addr = (IpAddr::V6(Ipv6Addr::LOCALHOST), 6009);

    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Bincode::default).await?;
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = GameServer { peer: &peer1, peer_state: &peer1_state };
            channel.execute(server.serve())
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {
            // act on channels here if necessary
        })
        .await;

    // stream.write(&message1to2);


    Ok(())
}
